// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using NUnit.Framework;
using Leap;
using LeapInternal;

namespace Leap.Tests {
    [TestFixture()]
    public class ObjectPoolTests
    {
        [Test()]
        public void CreationTest ()
        {
            ObjectPool<ImageData> pool = new ObjectPool<ImageData>(10, false);
            Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            for(int t = 0; t < 15; t++){
                pool.CheckOut();
                Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            }
        }
        [Test()]
        public void AllocateTest ()
        {
            ObjectPool<ImageData> pool = new ObjectPool<ImageData>(10);
            Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            for(int t = 0; t < 15; t++){
                pool.CheckOut();
                Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            }
        }
        [Test()]
        public void GrowableTest ()
        {
            ObjectPool<ImageData> pool = new ObjectPool<ImageData>(10, true);
            Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            int growToSize = 250;
            for(int t = 0; t < growToSize; t++){
                pool.CheckOut();
                Assert.GreaterOrEqual(pool.Capacity, t, "Pool capacity large enough");
            }

        }
        [Test()]
        public void CheckinTest ()
        {
            ObjectPool<ImageData> pool = new ObjectPool<ImageData>(10);
            Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            List<ImageData> listOfPooledItems = new List<ImageData>();
            for(int t = 0; t < 15; t++){
                listOfPooledItems.Add (pool.CheckOut());
                Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            }
            for(int t = 14; t >= 0; t--){
                ImageData toCheckin = listOfPooledItems[t];
                toCheckin.CheckIn ();
                Assert.AreEqual(10, pool.Capacity, "Pool capacity");
            }

        }

    }
}

